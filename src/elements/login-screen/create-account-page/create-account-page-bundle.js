!function(r){var e={};function n(s){if(e[s])return e[s].exports;var t=e[s]={i:s,l:!1,exports:{}};return r[s].call(t.exports,t,t.exports,n),t.l=!0,t.exports}n.m=r,n.c=e,n.d=function(r,e,s){n.o(r,e)||Object.defineProperty(r,e,{configurable:!1,enumerable:!0,get:s})},n.r=function(r){Object.defineProperty(r,"__esModule",{value:!0})},n.n=function(r){var e=r&&r.__esModule?function(){return r.default}:function(){return r};return n.d(e,"a",e),e},n.o=function(r,e){return Object.prototype.hasOwnProperty.call(r,e)},n.p="",n(n.s="./src/elements/login-screen/create-account-page/create-account-page.js")}({"./src/elements/login-screen/create-account-page/create-account-page.js":
/*!******************************************************************************!*\
  !*** ./src/elements/login-screen/create-account-page/create-account-page.js ***!
  \******************************************************************************/
/*! no static exports found */function(module,exports){eval('// import { WORDLIST } from "../../../wordlist.js"\r\n\r\nclass CreateAccountPage extends Polymer.Element {\r\n    static get is () {\r\n        return "create-account-page";\r\n    }\r\n    static get properties () {\r\n        return {\r\n            generatedPassphrase: {\r\n                type: String,\r\n                value: ""\r\n            },\r\n            passphraseInputType: {\r\n                type: String,\r\n                value: "password"\r\n            },\r\n            passphraseVisibilityIcon: {\r\n                type: String,\r\n                value: "icons:visibility-off"\r\n            },\r\n            loginHandler: {\r\n                type: Object\r\n            },\r\n            rememberMe: {\r\n                type: Boolean,\r\n                value: true\r\n            }\r\n        }\r\n    }\r\n\r\n    constructor () {\r\n        super()\r\n        this.crypto = window.crypto || window.msCrytpo\r\n    }\r\n\r\n    connectedCallback () {\r\n        super.connectedCallback()\r\n    }\r\n\r\n    ready () {\r\n        super.ready()\r\n        // this.generatedPassphrase = this.generatePassphrase()\r\n    }\r\n\r\n    _regeneratePassphrase () {\r\n        this.generatedPassphrase = this.generatePassphrase()\r\n    }\r\n\r\n    togglePassphraseVisibility () {\r\n        this.passphraseInputType = this.passphraseInputType === "password" ? "text" : "password";\r\n        this.passphraseVisibilityIcon = this.passphraseInputType === "password" ? "icons:visibility-off" : "icons:visibility"\r\n    }\r\n\r\n    _createClick (e) {\r\n        this.loading = true\r\n        this.login().then(response => {\r\n            this.loading = false\r\n            this.passphrase = \'\'\r\n        }, err => {\r\n            this.errorMessage = err\r\n            this.loading = false\r\n        })\r\n    }\r\n\r\n    async login () {\r\n        this.errorMessage = \'\'\r\n        const passphrase = this.passphrase\r\n        if (passphrase == undefined || passphrase.length == 0) throw new Error(\'No passphrase\')\r\n\r\n        if (passphrase.length < 15) throw new Error(\'Seedphrase must be longer than 15 characters\')\r\n\r\n        const seed = await this.loginHandler.kdf(passphrase)\r\n        const walletVersion = 2\r\n        \r\n        const wallet = this.loginHandler.newWallet(seed, walletVersion)\r\n        this.loginHandler.login(wallet)\r\n\r\n        if (this.rememberMe && this.loginType !== \'existingSeed\') {\r\n            // this._remember(passphraseSeed, 2)\r\n            this.loginHandler.saveSeed(seed, walletVersion, this.name, this.password)\r\n        }\r\n        this.loading = false\r\n    }\r\n}\r\n\r\ncustomElements.define(CreateAccountPage.is, CreateAccountPage)\r\n\r\n\r\n\r\n    // login(){\r\n    //     this.$.container.style.opacity = 0;\r\n    //     setTimeout(() => {\r\n    //         this.$.container.style.display = "none"\r\n    //     }, 500)\r\n    //     console.log(this.$.container)\r\n    // }\r\n\r\n        // generatePassphrase(){\r\n    //     const randNumArray = new Uint16Array(12)\r\n\r\n    //     this.crypto.getRandomValues(randNumArray)\r\n\r\n    //     let generatedPassphrase = "";\r\n\r\n    //     randNumArray.forEach(num => {\r\n    //         generatedPassphrase += " " + WORDLIST[num % WORDLIST.length]\r\n    //     })\r\n\r\n    //     return generatedPassphrase;\r\n    // }\r\n    \n\n//# sourceURL=webpack:///./src/elements/login-screen/create-account-page/create-account-page.js?')}});