!function(e){var n={};function r(t){if(n[t])return n[t].exports;var o=n[t]={i:t,l:!1,exports:{}};return e[t].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=n,r.d=function(e,n,t){r.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:t})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(n,"a",n),n},r.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},r.p="",r(r.s="./src/elements/login-screen/login-screen.js")}({"./src/elements/login-screen/login-screen.js":
/*!***************************************************!*\
  !*** ./src/elements/login-screen/login-screen.js ***!
  \***************************************************/
/*! no static exports found */function(module,exports){eval('class LoginContainer extends Polymer.Element {\r\n    static get is() {\r\n        return "login-screen";\r\n    }\r\n    static get properties() {\r\n        return {\r\n            selectedPage: {\r\n                type: String,\r\n                value: "welcome",\r\n                observer: "_pageChange"\r\n            },\r\n            pages: {\r\n                type: Object,\r\n                value: {\r\n                    "welcome": 0,\r\n                    "new-account" : 1,\r\n                    "login": 2\r\n                }\r\n            },\r\n            loggedIn : {\r\n                type: Boolean,\r\n                notify: true\r\n            },\r\n            wallet: {\r\n                type: Object,\r\n                notify: true\r\n            },\r\n            addressCount: {\r\n                type: Object\r\n            },\r\n            addresses : {\r\n                type: Array,\r\n                value: [],\r\n                notify: true\r\n            },\r\n            addressColors: {\r\n                type: Array\r\n            }\r\n        }\r\n    }\r\n    constructor() {\r\n        super()\r\n    }\r\n    connectedCallback() {\r\n        super.connectedCallback()\r\n    }\r\n    ready() {\r\n        super.ready()\r\n        this.selectedPage = "welcome"\r\n        this.loginHandler = this.$.loginHandler\r\n    }\r\n    logOut(){\r\n        this.$["login-page"].logOut()\r\n    }\r\n    _pageChange(newPage, oldPage){\r\n        if(!this.shadowRoot.querySelector("#loginContainerPages") || !newPage){\r\n            return\r\n        }\r\n        const pages = this.shadowRoot.querySelector("#loginContainerPages").children\r\n        // Run the animation on the newly selected page\r\n        const newIndex = this.pages[newPage]\r\n        if (!pages[newIndex].className.includes(\'animated\')) {\r\n            pages[newIndex].className += \' animated\';\r\n        }\r\n\r\n        if (typeof oldPage !== \'undefined\') {\r\n            const oldIndex = this.pages[oldPage]\r\n            // Stop the animation of hidden pages\r\n            //pages[oldIndex].className = pages[oldIndex].className.split(\' animated\').join(\'\');\r\n            pages[oldIndex].classList.remove("animated")\r\n        }\r\n    }\r\n    _backToWelcome(){\r\n        this.selectedPage = "welcome"\r\n    }\r\n\r\n}\r\n\r\ncustomElements.define(LoginContainer.is, LoginContainer)\n\n//# sourceURL=webpack:///./src/elements/login-screen/login-screen.js?')}});